class Solution {
public:
    
    bool subsetSum(vector<int> &nums,int sum){
        int n = nums.size();
        vector<vector<int>> dp;
        dp.resize(205,vector<int>(20005,false));

        for(int i=0; i<n; i++) dp[i][0] = true; //base  case
        for(int i=n-1; i>=0; i--){
            for(int j=1; j<=sum; j++){
                if(nums[i]<=j){
                    dp[i][j] = dp[i+1][j] || dp[i+1][j-nums[i]];
                }else{
                    dp[i][j] = dp[i+1][j];
                }
                
            }
        }
        return dp[0][sum];
    } 
    
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum=sum+nums[i];
        }
        if(sum%2!=0){
            return false;
        }
        else{
            return subsetSum(nums,sum/2);
        }
    }
};
