class Solution {
public:
    int dp[101][101];
    
    int solve(int startstick,int endstick,vector<int>& cuts,int left,int right){

        if(left>right) return 0;

        if(dp[left][right]!=-1){
            return dp[left][right];
        }
         int cost=INT_MAX;
        for(int i=left;i<=right;i++){

            int leftCost=solve(startstick,cuts[i],cuts,left,i-1);
            int rightCost=solve(cuts[i],endstick,cuts,i+1,right);

            int currcost=(endstick-startstick)+leftCost+rightCost;

            cost=min(cost,currcost);
        }

        return dp[left][right]=cost;
    }

    int minCost(int n, vector<int>& cuts) {

        memset(dp,-1,sizeof(dp));
        
        sort(cuts.begin(),cuts.end());

        return solve(0,n,cuts,0,cuts.size()-1);
    }
};
